slice null_addr() asm "b{00} PUSHSLICE";

const int op::transfer_jetton   = 0x0f8a7ea5;
const int op::transfer_nft      = 0x5fcc3d14;

const int WORKCHAIN             = 0;

() force_same_workchain(slice addr) impure inline {
    (int wc, _) = parse_std_addr(addr);
    throw_unless(333, wc == WORKCHAIN);
}

(int) send_cell_message(slice to_address, int value, cell payload, int sending_mode) impure inline_ref {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                    .store_maybe_ref(payload)
                .end_cell();
    return send_message(msg, sending_mode);
}

(int) send_message_with_comment(int flags,slice to_address, int value, slice comment, int sending_mode) impure inline_ref {
    cell msg = begin_cell()
                    .store_uint(flags, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
                    .store_slice(comment)
                .end_cell();
    return send_message(msg, sending_mode);
}

(int) send_jettons(int query_id, int jetton_amount, slice to_address, slice response_address, slice jetton_wallet_address, 
                   int msg_value, int sending_mode, int forward_ton_amount, cell forward_payload) impure inline_ref {

    builder msg_body = begin_cell()
                        .store_uint(op::transfer_jetton, 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(to_address);
    ifnot (null?(response_address)) {
        msg_body = msg_body.store_slice(response_address);
    }
    else {
        msg_body = msg_body.store_uint(0, 2);
    }
    msg_body = msg_body.store_uint(0, 1)
                        .store_coins(forward_ton_amount)
                        .store_uint(1, 1)
                        .store_maybe_ref(forward_payload);

    return send_cell_message(jetton_wallet_address, msg_value, msg_body.end_cell(), sending_mode);
}


() send_nft(int query_id, slice nft_address, slice to_address, 
            int msg_value, int sending_mode) impure inline {

    builder msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(nft_address)
                    .store_coins(msg_value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                    .store_uint(1, 1)
                    .store_ref(
                        begin_cell()
                            .store_uint(op::transfer_nft, 32)
                            .store_uint(query_id, 64)
                            .store_slice(to_address)
                            .store_slice(to_address)
                            .store_uint(0, 1)
                            .store_coins(1)
                            .store_uint(0, 1)
                        .end_cell()
                    );

    send_raw_message(msg.end_cell(), sending_mode); 
}

builder store_number10(builder b, int x) asm """
  ZERO                                                        // b x i=0
  SWAP                                                        // b i=0 x
  UNTIL:<{                                                    // b i x
    10 PUSHINT DIVMOD                                         // b i x r
    48 ADDCONST                                               // b i x r
    s3 s1 s3 XCHG3                                            // r b x i
    INC                                                       // r b x i
    s1 s0 XCPU                                                // r b i x x
    ISZERO
  }>
  DROP
  REPEAT:<{ 8 STU }>                                          // ..rrr.. b i
""";

builder build_exit_code(builder b, int code) {
    if(code == 13) {
        return b.store_slice("Not enough gas!");
    }
    if(code == 50) {
        return b.store_slice("You cannot bet twice!");
    }
    if(code == 51) {
        return b.store_slice("Invalid bet amount!");
    }
    if(code == 52) {
        return b.store_slice("Wrong address format!");
    }
    if(code == 53) {
        return b.store_slice("Cycle length must be > 0!");
    }
    if(code == 54) {
        return b.store_slice("Wrong deploy amount!");
    }
    if(code == 55) {
        return b.store_slice("Wait until the lottery ends!");
    }
    if(code == 56) {
        return b.store_slice("Bet must be > 0!");
    }
    if(code == 57) {
        return b.store_slice("Cooldown 3 minutes!");
    }
    if(code == 58) {
        return b.stoe_slice("ðŸš«");
    }
    if(code == 401) {
        return b.store_slice("Forbidden!");
    }
    if(code == 888) {
        return b.store_slice("Unknown error!");
    }
    if(code == 65535) {
        return b.store_slice("Unknown OP!");
    }
    return b.store_number10(code);
}


builder store_str_float(builder b, int number, int ten_pow_decimals) {
    (int int_part, int dec_part) = divmod(number, ten_pow_decimals);
    if (int_part + dec_part == 0) {
        return b.store_number10(0);
    }

    ;; displayed decimals = max(min(jetton_decimals, 5 - log10(int_part)), 0)
    b = b.store_number10(int_part);
    int max_dec_part = (int_part) ? (100000 / int_part) : (muldiv(ten_pow_decimals, ten_pow_decimals, (100000 * (dec_part + 1))));
    while (dec_part > max_dec_part) {
        dec_part /= 10;
    }
    if (dec_part) {
        b = b.store_uint(46, 8)  ;; store "." (dot)
                .store_number10(dec_part);
    }

    return b;
}
